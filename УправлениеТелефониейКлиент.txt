//Внутренние функции телефонии
Процедура ВыполнитьКоманду(СтрокаКоманды) Экспорт;
	
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли
	
	ПС = Символы.ВК + Символы.ПС;
	
	ПослеВызоваМетодаВыполнитьКоманду = Новый ОписаниеОповещения("ОповещениеОВызовеМетода",УправлениеТелефониейКлиент,"InnovaIT-Asterisk-Native-ВыполнитьКоманду");

	Если Найти(СтрокаКоманды,ПС+ПС)=0 Тогда
		Сообщить("ВыполнитьКоманду: Неверный формат команды: "+ПС+СтрокаКоманды);
		Возврат;
	КонецЕсли;
	
	ГлТелефония.НачатьВызовВыполнитьКоманду(ПослеВызоваМетодаВыполнитьКоманду,СтрокаКоманды);
	
КонецПроцедуры

//	Action: Events - Посылает команду Events
//	EventMask: маска типов событий, может принимать следующие значения:
//    'on' – включает отправку всех событий.
//    'off' – выключает отправку всех событий.
//    'system,call,log' – перечисление типов событий, которые будут отправляться в текущее соединение. 
//	ActionID - В него приетает ID команды и результат выполнения. (Это уже во ВнешнееСобытие) 
Функция Event(СтрокаФильтр="on", ИД="") Экспорт;
	ПС = Символы.ВК + Символы.ПС;

	ТекстКоманды="Action: Events"+ПС+
	"EventMask: "+СтрокаФильтр+ПС;
	
	Если НЕ ПустаяСтрока(ИД) Тогда
		ТекстКоманды = ТекстКоманды + "ActionID: "+ИД+ПС;
	КонецЕсли; 
	
	ТекстКоманды = ТекстКоманды + ПС;
	
	ВыполнитьКоманду(ТекстКоманды);
	
КонецФункции


//Action: login - Посылает команду Login
//Username: user
//Secret: pass
Функция Login(Логин,Пароль) Экспорт 

	Если ПустаяСтрока(Логин) Тогда
		Сообщить("Login(). Не указан параметр <Логин>");
		Возврат Ложь;
	КонецЕсли; 
	
	Если ПустаяСтрока(Пароль) Тогда
		Сообщить("Login(). Не указан параметр <Пароль>");
		Возврат Ложь;
	КонецЕсли; 
	
		ПС = Символы.ВК + Символы.ПС;
		СтрокаКоманды= "Action: Login"+ПС+
		"Username: "+Логин+ПС+
		"Secret: "+Пароль+ПС+ПС;
		ВыполнитьКоманду(СтрокаКоманды);
КонецФункции        

//Action: Logoff - Посылает команду Logoff
//Отключает текущую сессию
Функция Logoff() Экспорт 
	
	ПС = Символы.ВК + Символы.ПС;
	ТекстКоманды = "Action: Logoff"+ПС+ПС;
	ВыполнитьКоманду(ТекстКоманды);

КонецФункции

//	Источник(Channel)**			: Название канала, с которого совершается исходящий вызов (В том же формате, как если бы Вы совершали вызов этому абоненту командой Dial.)
//	Приемник(Exten)**			: Extension to use on connect (используется только совместно с параметрами Context и Priority)
//	Контекст(Context)			: Название контекста для совершения исходящего вызова (используется только совместно с параметрами Exten и Priority)
//	Таймаут(Timeout)			: Таймаут (в миллисекундах) для соединения с инициатором исходящего вызова (значение по умолчанию: 30000 миллисекунд).
//	Приоритет(Priority)			: Priority to use on connect (используется только совместно с параметрами Context и Exten)
//	ЦИД(CallerID)				: Значение CallerID, используемое для совершения исходящего вызова.
//	СтрокаПеременных(Variable)	: Установка переменных канала (максимум 32). Переменные будут установлены для обоих каналов, участвующих в соединении (локального, для абонента от которого совершается вызов и для вызываемого канала).
//	КодДоступа(Account)			: Значение для “Account code” исходящего вызова.
//	КомандаНабора(Application)	: Команда плана набора, используемая для совершения исходящего вызова (используется параметр “Data”, для указания ее параметров)
//	ДанныеНабора(Data)			: Параметры команды плана набора, используемой для совершения исходящего вызова.
//	ФлагАсинхронно(Async)		: Если указано “true” исходящий вызов будет производиться асинхронно. Результат ее выполнения будет возвращен позже, в пакете типа “Event” (позволяет осуществлять несколько вызовов без ожидания результата предыдущей команды, совершающей исходящий вызов)
//	ИД(ActionID)				: Не обязательный идентификатор запроса. Позволяет сопоставить результат выполнения конкретному запросу. В качестве значения можно использовать или номер или строку. Очень полезно использовать, когда выполняется несколько асинхронных запросов одновременно. 
//	** - Обязательные поля;
Функция Originate(Источник, Приемник, Контекст = "", Таймаут="30000", Приоритет="1", ЦИД="", СтрокаПеременных="", КодДоступа="", КомандаНабора="", ДанныеНабора="", ФлагАсинхронно="true", ИД="")

	ПС = Символы.ВК + Символы.ПС;
	
	Если ПустаяСтрока(Приемник) Тогда
		Сообщить("Originate(). Ошибка. Не указан номер, на который выполняется звонок");
		Возврат Ложь;
	КонецЕсли; 
	
	Если ПустаяСтрока(Источник) Тогда
		Сообщить("Originate(). Ошибка. Не указан номер-источник, с которого выполняется звонок");
		Возврат Ложь;
	КонецЕсли; 
	
	Если ПустаяСтрока(Контекст) Тогда
		Сообщить("Originate(). Ошибка. Не указан контекст");
		Возврат Ложь;
	КонецЕсли; 
	
	Если ПустаяСтрока(ЦИД) Тогда
		ЦИД = Источник;
	КонецЕсли; 
	
	Если ПустаяСтрока(СтрокаПеременных) Тогда
		СтрокаПерем = "";
	КонецЕсли; 
	
	ТекстКоманды="Action: Originate"+ПС+
	"Channel: "+Источник+ПС+
	"Context: "+Контекст+ПС+
	"Exten: "+Приемник+ПС+
	"Priority: "+Приоритет+ПС+
	"Callerid: "+ЦИД+ПС+
	"Timeout: "+Таймаут+ПС;
	
	Если НЕ ПустаяСтрока(СтрокаПерем) Тогда
		ТекстКоманды = ТекстКоманды + "Variable: "+СтрокаПерем+ПС;
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(КодДоступа) Тогда
		ТекстКоманды = ТекстКоманды + "Account: "+КодДоступа+ПС;
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(КомандаНабора) Тогда
		ТекстКоманды = ТекстКоманды + "Application: "+КомандаНабора+ПС;
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(ДанныеНабора) Тогда
		ТекстКоманды = ТекстКоманды + "Data: "+ДанныеНабора+ПС;
	КонецЕсли; 
	
	ТекстКоманды = ТекстКоманды + "Async: "+ФлагАсинхронно+ПС;
	
	Если НЕ ПустаяСтрока(ИД) Тогда
		ТекстКоманды = ТекстКоманды + "ActionID: "+ИД+ПС;
	КонецЕсли; 
	
	ТекстКоманды = ТекстКоманды + ПС;
	
	ВыполнитьКоманду(ТекстКоманды);

	Возврат Истина;
КонецФункции // Originate


Функция НабратьНомер (НомерДляЗвонка) Экспорт;
	
	ПараметрыПодключенияКТелефонии = УправлениеТелефониейСервер.ВернутьПараметрыПользователяТелефонии();
	Протокол	= "PJSIP/"; // SIP/,PJSIP/,IAX/, и т.д. - в зависимости от настроект АТС 
	Контекст	= "from-internal"; // "from-local, from-internal" - в зависимости от настроект АТС
	
	ПС = Символы.ВК + Символы.ПС;

	Если ПустаяСтрока(НомерДляЗвонка) Тогда
		Сообщить("Звонить(). Ошибка. Не указан номер куда выполняется звонок");
		Возврат Ложь;
	КонецЕсли;
	
	ВнутреннийНомер		= Протокол+ПараметрыПодключенияКТелефонии.ВнутреннийНомер;

	Результат = Originate(ВнутреннийНомер, НомерДляЗвонка, Контекст, , 1, НомерДляЗвонка);

КонецФункции 

Функция ДанныеВСоответствие(Данные) Экспорт;
	
	ПС = Символы.ВК + Символы.ПС;

	
	Массив=Новый Соответствие;
	
	// Пакет может быть завершен \r, без \n. Дополним...
	Если Прав(Данные,1)=Символы.ВК Тогда
		Данные=Данные+Символы.ПС;
	КонецЕсли; 
	
	КолвоСтрок	= СтрЧислоСтрок(Данные);
		
	Разделитель=": ";
	ДлинаРазделителя=СтрДлина(Разделитель);
 
	Для Индекс=1 По КолвоСтрок Цикл
		
		ТекСтрока= СтрПолучитьСтроку(Данные, Индекс);
		
		ПозицияРазделителя=Найти(ТекСтрока,Разделитель);
		Ключ=Лев(ТекСтрока,ПозицияРазделителя-1);
		Значение=Сред(ТекСтрока,ПозицияРазделителя+ДлинаРазделителя);
		Если ЗначениеЗаполнено(Ключ) Тогда
			Массив.Вставить(Ключ,Значение);
		КонецЕсли; 	
	КонецЦикла; 
	
	Возврат Массив;

КонецФункции //ДанныеВСоответствие


Процедура НачатьУстановкуКомпонентыТелефонии(АдресВнешнейКомпоненты) Экспорт
	
	ДополнительныеДанные = Новый Соответствие;
	ДополнительныеДанные.Вставить("Источник","InnovaIT-Asterisk-Native");
	ДополнительныеДанные.Вставить("АдресВременногоХранилища", АдресВнешнейКомпоненты); 
	ДополнительныеДанные.Вставить("ЭтоПервыйЗапуск", Истина); 
	ПослеУстановки = Новый ОписаниеОповещения("ОповещениеОбУстановкеВнешнихКомпонент",УправлениеТелефониейКлиент,ДополнительныеДанные);  
	НачатьУстановкуВнешнейКомпоненты(ПослеУстановки,АдресВнешнейКомпоненты);
	
КонецПроцедуры

Процедура НачатьУстановкуПодключенияТелефония() Экспорт
	      
		ПараметрыПодключенияКТелефонии = УправлениеТелефониейСервер.ВернутьПараметрыПользователяТелефонии();
		
		ПослеВызоваМетодаПодключиться = Новый ОписаниеОповещения("ОповещениеОВызовеМетода",УправлениеТелефониейКлиент,"InnovaIT-Asterisk-Native-Подключиться");
		глТелефония.НачатьВызовПодключиться(ПослеВызоваМетодаПодключиться, ПараметрыПодключенияКТелефонии.АдресСервера,ПараметрыПодключенияКТелефонии.ПортСервера);
		Login(ПараметрыПодключенияКТелефонии.Логин,ПараметрыПодключенияКТелефонии.Пароль);
		
		ПослеЧтенияСвойстваИдентификатор = Новый ОписаниеОповещения("ОповещениеОЧтенииСвойства",УправлениеТелефониейКлиент,"InnovaIT-Asterisk-Native-Идентификатор");
		ГлТелефония.НачатьПолучениеИдентификатор(ПослеЧтенияСвойстваИдентификатор);

		ПослеУстановкиСвойстваКлючПродукта = Новый ОписаниеОповещения("ОповещениеОбУстанвкеСвойства",УправлениеТелефониейКлиент,"InnovaIT-Asterisk-Native-КлючПродукта");

		глТелефония.НачатьУстановкуКлючПродукта(ПослеУстановкиСвойстваКлючПродукта, ПараметрыПодключенияКТелефонии.КлючПродукта); // Устанавливаем полученный ключ. Т.к. Ключ проверяется при установке режима прослушивания.
		
		ПослеВызоваМетодаРежимПрослушивания = Новый ОписаниеОповещения("ОповещениеОВызовеМетода",УправлениеТелефониейКлиент,"InnovaIT-Asterisk-Native-РежимПрослушивания");
		ГлТелефония.НачатьВызовРежимПрослушивания(ПослеВызоваМетодаРежимПрослушивания,Истина);
		
		ПослеЧтенияСвойстваДемонстрационныйРежим = Новый ОписаниеОповещения("ОповещениеОЧтенииСвойства",УправлениеТелефониейКлиент,"InnovaIT-Asterisk-Native-ДемонстрационныйРежим");

	 	ГлТелефония.НачатьПолучениеДемонстрационныйРежим(ПослеЧтенияСвойстваДемонстрационныйРежим);
	//	Response - Нужен на команды Login. Там есть ответ, залогинены мы или нет. Т.к. Link Established - Говорит только о том что "поднято соединение". 
	//  Newstate - В момент начала звонка, поднятия трубки генерируется именно это событие. 4 - Звонит, 6 - поляли трубку.
	//	MIXMONITOR_FILENAME - Тут мы получаем ссылку на файл записи телефонного разговора. 
	//  Hangup - Ловим событие, что трубку положили
	//  Bridge - ловим событие что переключили звонок.
	// Вообще доступны любые выражения в формате ECMAScript. Это если верить Microsoft.
	
	  ПослеВызоваМетодаУстановитьРегулярноеВыражение = Новый ОписаниеОповещения("ОповещениеОВызовеМетода",УправлениеТелефониейКлиент,"InnovaIT-Asterisk-Native-УстановитьРегулярноеВыражение");
      ГлТелефония.НачатьВызовУстановитьРегулярноеВыражение(ПослеВызоваМетодаУстановитьРегулярноеВыражение, "BridgeEnter([^.]*)CallerIDNum: "+ПараметрыПодключенияКТелефонии.ВнутреннийНомер+"|BridgeLeave([^.]*)CallerIDNum: "+ПараметрыПодключенияКТелефонии.ВнутреннийНомер+"|MIXMONITOR_FILENAME|Disconnected");  
			
КонецПроцедуры
	
Процедура НачатьПодключениеКомпонентыТелефонии() Экспорт
	
		АдресВнешнейКомпоненты=УправлениеТелефониейСервер.ПолучитьАдресВнешнейКомпоненты(Новый УникальныйИдентификатор);
		
		ДополнительныеДанные = Новый Соответствие;
		ДополнительныеДанные.Вставить("Источник","InnovaIT-Asterisk-Native");
		ДополнительныеДанные.Вставить("АдресВременногоХранилища", АдресВнешнейКомпоненты); 
		ДополнительныеДанные.Вставить("ЭтоПервыйЗапуск", Истина);
		
		ПослеПодключения = Новый ОписаниеОповещения("ОповещениеОПодключенииВнешнихКомпонент",УправлениеТелефониейКлиент, ДополнительныеДанные);  
		НачатьПодключениеВнешнейКомпоненты(ПослеПодключения, АдресВнешнейКомпоненты,"InnovaIT",ТипВнешнейКомпоненты.Native);
КонецПроцедуры
 
Функция ИнициализироватьТелефонию() Экспорт;
	// кроме веб-клиента
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли
	
	ИДОбъекта="AddIn.InnovaIT.InnovaIT-Asterisk-Native";
	
	Попытка
		ГлТелефония = Новый (ИДОбъекта);
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции


Процедура Активизировать() Экспорт
	
	Если УправлениеТелефониейСервер.ПроверитьВозможностьРаботыСТелефонией() тогда
		НачатьПодключениеКомпонентыТелефонии();	                       
	КонецЕсли;
КонецПроцедуры                    

Процедура Деактивизировать() Экспорт
	
	Если глТелефония<> Неопределено тогда
		ПослеЧтенияСвойстваПодключено = Новый ОписаниеОповещения("ОповещениеОЧтенииСвойства",УправлениеТелефониейКлиент,"InnovaIT-Asterisk-Native-Подключено");
		ГлТелефония.НачатьПолучениеПодключено(ПослеЧтенияСвойстваПодключено);
	КонецЕсли;
КонецПроцедуры

Процедура ОповещениеОбУстановкеВнешнихКомпонент(ДополнительныеДанные) Экспорт
	Если  ДополнительныеДанные["Источник"] = "InnovaIT-Asterisk-Native" тогда
				
			АдресВнешнейКомпоненты=ДополнительныеДанные["АдресВременногоХранилища"];
			ПослеПодключения = Новый ОписаниеОповещения("ОповещениеОПодключенииВнешнихКомпонент",УправлениеТелефониейКлиент,ДополнительныеДанные); 
			Если ДополнительныеДанные["ЭтоПервыйЗапуск"] тогда
				НачатьПодключениеВнешнейКомпоненты(ПослеПодключения, АдресВнешнейКомпоненты,"InnovaIT",ТипВнешнейКомпоненты.Native);
				ДополнительныеДанные["ЭтоПервыйЗапуск"] = Ложь;
			КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Процедура ОповещениеОПодключенииВнешнихКомпонент(Результат, ДополнительныеДанные) Экспорт
	
	Если  ДополнительныеДанные["Источник"] = "InnovaIT-Asterisk-Native" тогда
		Если Результат тогда
			Сообщить("Компонента "+ДополнительныеДанные + " Подключена");
			Инициализирована = УправлениеТелефониейКлиент.ИнициализироватьТелефонию();
			Если Инициализирована тогда
				УправлениеТелефониейКлиент.НачатьУстановкуПодключенияТелефония();
			КонецЕсли;
		Иначе
			Сообщить("!!!Компонента "+ДополнительныеДанные + " не подключена. Вызов установки.");
			УправлениеТелефониейКлиент.НачатьУстановкуКомпонентыТелефонии(ДополнительныеДанные["АдресВременногоХранилища"]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповещениеОВызовеМетода(Результат, Параметры, ДополнительныеДанные) Экспорт
	Если ДополнительныеДанные = "InnovaIT-Asterisk-Native-Подключиться" тогда
		Если НЕ Результат тогда
			Сообщить("!!!Не удалось подключиться к серверу. (Адрес: " + Параметры[0] + " Порт: " +Параметры[1]+")");
		КонецЕсли;
	ИначеЕсли ДополнительныеДанные = "InnovaIT-Asterisk-Native-ВыполнитьКоманду" тогда
		 Если НЕ Результат тогда
			Сообщить("!!!Не удалось выполнить команду. Команда:" + СИмволы.ПС + Параметры[0]);
		КонецЕсли;
	ИначеЕсли ДополнительныеДанные = "InnovaIT-Asterisk-Native-РежимПрослушивания" тогда
		 Если НЕ Результат тогда
			Сообщить("!!!Не удалось перейти в режим прослушивания");
		 Иначе
			Сообщить("Режим прослушивания включен.");
		КонецЕсли;
	ИначеЕсли ДополнительныеДанные = "InnovaIT-Asterisk-Native-Отключиться" тогда
		 Если НЕ Результат тогда
			Сообщить("!!!Не удалось отключиться");
		 КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОповещениеОЧтенииСвойства(Результат, ДополнительныеДанные) Экспорт
	Если ДополнительныеДанные = "InnovaIT-Asterisk-Native-Идентификатор" тогда
		Сообщить("ИД компьютера: " +Результат);
	ИначеЕсли ДополнительныеДанные = "InnovaIT-Asterisk-Native-ДемонстрационныйРежим" тогда
		Сообщить("Демонстрационный режим: " + Результат);
	ИначеЕсли ДополнительныеДанные = "InnovaIT-Asterisk-Native-Подключено" тогда
		Если Результат тогда
			ПослеВызоваМетодаОтключиться = Новый ОписаниеОповещения("ОповещениеОВызовеМетода",УправлениеТелефониейКлиент,"InnovaIT-Asterisk-Native-Отключиться");
            ГлТелефония.НачатьВызовОтключиться(ПослеВызоваМетодаОтключиться); //
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОповещениеОбУстанвкеСвойства (Результат) Экспорт
	// Тут я так понимаю ответ компоненты. Удалось или нет установить свойство.	
КонецПроцедуры

Процедура ОбработатьВнешнееСобытие(Событие, Данные) Экспорт
		
		Если Событие = "Disconnected" тогда
			Сообщить ("Обрыв соединения " + Формат(ТекущаяДата(),"ДЛФ=DT"));
			//ПодключитьОбработчикОжидания("ИНН_УправлениеТелефониейКлиент.Автоподключение",5,Ложь);
			НачатьУстановкуПодключенияТелефония();
		КонецЕсли;
		
		ДанныеСобытия = ДанныеВСоответствие(Данные);
		Если ДанныеСобытия.Получить("Event") <> Неопределено тогда
			Если ДанныеСобытия["Event"] = "VarSet"  и ДанныеСобытия["Variable"] = "MIXMONITOR_FILENAME" тогда  // Заполним данные для записи
				// Запись разговора
				ВходящийНомер = УправлениеТелефониейСервер.ВернутьДестизначныйНомер(ДанныеСобытия["CallerIDNum"]);
				СсылкаНаЗапись = ДанныеСобытия["Value"];
				ИД =  ДанныеСобытия["Uniqueid"];
				СвязанноеИД = ДанныеСобытия["Linkedid"];
				ВходящийТранк = Сред(ДанныеСобытия["Channel"],5,11);
				Если Лев(ВходящийТранк,1) = "7" тогда
					ВходящийТранк = Прав(ВходящийТранк,10);
				Иначе
					ВходящийТранк = Лев(ВходящийТранк,10);
				КонецЕсли;
				ВнутреннийАбонент = "";
				УправлениеТелефониейСервер.ЗаписатьСобытиеТелефонии(ИД, СвязанноеИД, ВходящийТранк,ВходящийНомер,СсылкаНаЗапись,ВнутреннийАбонент, 0);
				
			ИначеЕсли ДанныеСобытия["Event"] = "BridgeEnter" тогда 
				   
					ВходящийНомер = УправлениеТелефониейСервер.ВернутьДестизначныйНомер(ДанныеСобытия["ConnectedLineNum"]);
					СсылкаНаЗапись = "";
					ИД =  ДанныеСобытия["Uniqueid"];
					СвязанноеИД = ДанныеСобытия["Linkedid"];
					ВходящийТранк = "";
					ВнутреннийАбонент = ДанныеСобытия["CallerIDNum"];
					УправлениеТелефониейСервер.ЗаписатьСобытиеТелефонии(ИД, СвязанноеИД, ВходящийТранк,ВходящийНомер,СсылкаНаЗапись,ВнутреннийАбонент, 1);
				
					МассивКонтакты = Новый Массив;
					Параметры = Новый Структура("МассивКонтакты", МассивКонтакты);
					Параметры.Вставить("НомерТелефона",ВходящийНомер);
					
				
					ФормаТелефонии =  ПолучитьФорму("Обработка.РабочееМестоОператораТелефонии.Форма",Параметры);
					Если ФормаТелефонии.Открыта() тогда
						Оповестить("НовыйЗвонок",Параметры,"ВнешнееСобытиеТелефонныйЗвонок");
						ФормаТелефонии.Активизировать();
						ФормаТелефонии.ТекущийЭлемент = ФормаТелефонии.Элементы.ГруппаСтраницаРабочееМесто;
					Иначе
						ФормаТелефонии.Открыть();
					КонецЕсли;
								
			ИначеЕсли ДанныеСобытия["Event"] = "BridgeLeave" тогда	
				
					ВходящийНомер = УправлениеТелефониейСервер.ВернутьДестизначныйНомер(ДанныеСобытия["ConnectedLineNum"]);
					СсылкаНаЗапись = "";
					ИД =  ДанныеСобытия["Uniqueid"];
					СвязанноеИД = ДанныеСобытия["Linkedid"];
					ВходящийТранк = "";
					ВнутреннийАбонент = ДанныеСобытия["CallerIDNum"];
					УправлениеТелефониейСервер.ЗаписатьСобытиеТелефонии(ИД, СвязанноеИД, ВходящийТранк,ВходящийНомер,СсылкаНаЗапись,ВнутреннийАбонент, 2);
				
					//МассивКонтакты = Новый Массив;
					//Параметры = Новый Структура("МассивКонтакты", МассивКонтакты);
					//Параметры.Вставить("НомерТелефона",ВходящийНомер);
					//ФормаТелефонии =  ПолучитьФорму("Обработка.РабочееМестоОператораТелефонии.Форма",Параметры);
					//Если ФормаТелефонии.Открыта() тогда
					//	Оповестить("НовыйЗвонок",Параметры,"ВнешнееСобытиеТелефонныйЗвонок");
					//	ФормаТелефонии.Активизировать();
					//Иначе
					//	ФормаТелефонии.Открыть();
					//КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		
КонецПроцедуры
